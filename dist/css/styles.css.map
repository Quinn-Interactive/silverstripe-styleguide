{"version":3,"sources":["webpack:///./scss/mixins/_include-media.scss","webpack:///./scss/styles.scss","webpack:///./scss/components/_body.scss","webpack:///./scss/components/_html.scss","webpack:///./scss/components/_code.scss","webpack:///./scss/components/_layout.scss","webpack:///./scss/components/_nav.scss","webpack:///./scss/components/_section.scss","webpack:///./scss/components/_example.scss","webpack:///./scss/components/_swatch.scss"],"names":[],"mappings":"AAAA;;;;;;ECMC;;ACND;EACI;EACA;EACA;CDSJ;;AEZA;EACI;EACA;CFeJ;;AGjBA;EACI;CHoBJ;;AGjBA;EACI;EACA;CHoBJ;;AD6hBI;EKvjBJ;IAEQ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;GJ6BN;CACF;;AI1BA;EACI;EACA;EACA;EACA;EACA;EACA;EACA;CJ6BJ;;ADsgBI;EK1iBJ;IAUQ;IACA;IACA;IACA;IACA;GJ+BN;CACF;;AI7BI;EACI;CJgCR;;AI5BA;EACI;CJ+BJ;;ADofI;EKphBJ;IAIQ;IACA;IACA;GJiCN;CACF;;AK3EA;EACI;EACA;EACA;EACA;CL8EJ;;AK5EI;EACI;KAAA;UAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;CL+ER;;AK7EQ;EACI;CLgFZ;;AK9EY;EACI;CLiFhB;;AK7EQ;EACI;CLgFZ;;AK5EI;EACI;EACA;CL+ER;;AK5EI;EACI;EACA;EACA;CL+ER;;AK5EI;EACI;EACA;EACA;EACA;EACA;CL+ER;;AK7EQ;EACI;EACA;EACA;CLgFZ;;AK9EY;EACI;CLiFhB;;AK7EQ;EACI;CLgFZ;;AK7EQ;EACI;CLgFZ;;AK7EQ;EACI;CLgFZ;;AK7EQ;EACI;CLgFZ;;AK7EQ;EACI;EACA;CLgFZ;;AM7JA;EACI;CNgKJ;;AM7JQ;EACI;EACA;CNgKZ;;AOrKI;EACI;EACA;EACA;EACA;EACA;KAAA;MAAA;UAAA;EACA;CPwKR;;AOtKQ;EACI;CPyKZ;;AOrKI;EACI;EACA;EACA;EACA;EACA;CPwKR;;AOpKQ;EACI;CPuKZ;;AOnKI;EACI;CPsKR;;AOnKI;EACI;KAAA;UAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;CPsKR;;AOpKQ;EACI;CPuKZ;;AOpKQ;EACI;EACA;EACA;CPuKZ;;AOnKI;EACI;EACA;EACA;CPsKR;;AOnKI;EACI;EACA;EACA;EACA;CPsKR;;AQtOA;EAEI;EACA;EACA;EACA;EACA;CRwOJ;;AQtOI;EACI;CRyOR;;AQtOI;EACI;EACA;CRyOR","file":"css/styles.css","sourcesContent":["/*\n#@mixin include-media()\n\nTBD\n\nStyleguide 03_Mixins.includemedia\n*/\n\n@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `â¥`, `â¤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', 'â¥', 'â¤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', 'â¤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","/*\n#@mixin include-media()\n\nTBD\n\nStyleguide 03_Mixins.includemedia\n*/\n\n.sg-body {\n  margin: 0;\n  overflow: hidden;\n  padding: 0;\n}\n\n.sg-html {\n  margin: 0;\n  padding: 0;\n}\n\n.sg-code {\n  overflow: hidden;\n}\n\n.sg-prettyprint {\n  overflow: auto;\n  padding: 0.5em;\n}\n\n@media (min-width: 768px) {\n  .sg-layout {\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n    left: 0;\n    overflow: hidden;\n    position: absolute;\n    top: 0;\n    width: 100%;\n  }\n}\n\n.sg-layout-nav {\n  height: 100%;\n  margin-right: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  transition: margin-right 0.25s ease;\n  width: 15rem;\n}\n\n@media (min-width: 768px) {\n  .sg-layout-nav {\n    flex: 0 0 auto;\n    height: 100%;\n    max-width: none;\n    overflow: visible;\n    position: relative;\n  }\n}\n\n.sg-layout-nav.-hide {\n  margin-right: -15rem;\n}\n\n.sg-layout-content {\n  padding: 0 1rem;\n}\n\n@media (min-width: 768px) {\n  .sg-layout-content {\n    flex: 1 1 auto;\n    overflow: auto;\n    padding: 0 2rem;\n  }\n}\n\n.sg-nav {\n  background-color: #ccc;\n  height: 100%;\n  overflow: auto;\n  width: 100%;\n}\n\n.sg-nav__btn {\n  appearance: none;\n  background-color: transparent;\n  border: 0;\n  color: #fff;\n  font-size: 1.25em;\n  font-weight: bold;\n  padding: 0.25em 0.5em;\n  position: fixed;\n  right: 0;\n  top: 0;\n}\n\n[data-nav].-hide .sg-nav__btn {\n  color: #000;\n}\n\n[data-nav].-hide .sg-nav__btn:hover {\n  color: #ccc;\n}\n\n.sg-nav__btn:hover {\n  color: #ccc;\n}\n\n.sg-nav__list {\n  margin: 0;\n  padding: 0;\n}\n\n.sg-nav__item {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.sg-nav__link {\n  color: #000;\n  display: block;\n  margin: 0;\n  padding: 0.25em 1rem;\n  text-decoration: none;\n}\n\n.sg-nav__link.-page {\n  background-color: #333;\n  color: #fff;\n  padding: 0.5em 1rem;\n}\n\n.sg-nav__link.-page.-active {\n  font-weight: bold;\n}\n\n.sg-nav__link.-depth-0 {\n  font-weight: bold;\n}\n\n.sg-nav__link.-depth-2 {\n  padding-left: 0.5rem;\n}\n\n.sg-nav__link.-depth-3 {\n  padding-left: 0.75rem;\n}\n\n.sg-nav__link.-depth-4 {\n  padding-left: 1rem;\n}\n\n.sg-nav__link.-mod {\n  color: #666;\n  font-size: 0.8em;\n}\n\n.sg-section {\n  margin-top: 1rem;\n}\n\n.sg-section__description pre {\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\n.sg-example__example {\n  border: 1px solid #ccc;\n  border-bottom: 0;\n  padding: 1rem;\n  touch-action: none;\n  user-select: none;\n  width: 100%;\n}\n\n.sg-example__example.-nopad {\n  padding: 0;\n}\n\n.sg-example__controls {\n  border: 1px solid #ccc;\n  font-size: 16px;\n  padding: 0.25em 16px;\n  position: relative;\n  text-align: right;\n}\n\n.sg-example__code.-hide {\n  display: none;\n}\n\n.sg-example__prettyprint {\n  margin-top: 0;\n}\n\n.sg-example__btn {\n  appearance: none;\n  background-color: transparent;\n  border: 0;\n  display: inline-block;\n  height: 16px;\n  margin-left: 16px;\n  opacity: 0.5;\n  padding: 0;\n  width: 16px;\n}\n\n.sg-example__btn:hover {\n  opacity: 1;\n}\n\n.sg-example__btn img {\n  display: block;\n  height: 100%;\n  width: 100%;\n}\n\n.sg-example__iframe {\n  border: 0;\n  height: 100%;\n  width: 100%;\n}\n\n.sg-example__iframeWidth {\n  color: #ccc;\n  float: left;\n  font-size: 14px;\n  line-height: 24px;\n}\n\n.sg-swatch {\n  display: inline-block;\n  margin-bottom: 1em;\n  margin-right: 10px;\n  vertical-align: top;\n  width: 200px;\n}\n\n.sg-swatch__list {\n  margin-top: 1rem;\n}\n\n.sg-swatch__color {\n  height: 50px;\n  width: 200px;\n}\n\n",".sg-body {\n    margin: 0;\n    overflow: hidden;\n    padding: 0;\n}\n\n",".sg-html {\n    margin: 0;\n    padding: 0;\n}\n",".sg-code {\n    overflow: hidden;\n}\n\n.sg-prettyprint {\n    overflow: auto;\n    padding: 0.5em;\n}\n\n",".sg-layout {\n    @include media('>=tablet') {\n        display: flex;\n        flex-direction: row;\n        height: 100%;\n        left: 0;\n        overflow: hidden;\n        position: absolute;\n        top: 0;\n        width: 100%;\n    }\n}\n\n.sg-layout-nav {\n    height: 100%;\n    margin-right: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    transition: margin-right 0.25s ease;\n    width: $nav-width;\n\n    @include media('>=tablet') {\n        flex: 0 0 auto;\n        height: 100%;\n        max-width: none;\n        overflow: visible;\n        position: relative;\n    }\n\n    &.-hide {\n        margin-right: -$nav-width;\n    }\n}\n\n.sg-layout-content {\n    padding: 0 1rem;\n\n    @include media('>=tablet') {\n        flex: 1 1 auto;\n        overflow: auto;\n        padding: 0 2rem;\n    }\n}\n",".sg-nav {\n    background-color: $color-nav-bkgnd;\n    height: 100%;\n    overflow: auto;\n    width: 100%;\n\n    &__btn {\n        appearance: none;\n        background-color: transparent;\n        border: 0;\n        color: $color-nav-page;\n        font-size: 1.25em;\n        font-weight: bold;\n        padding: 0.25em 0.5em;\n        position: fixed;\n        right: 0;\n        top: 0;\n\n        [data-nav].-hide & {\n            color: $color-nav;\n\n            &:hover {\n                color: $color-nav-bkgnd;\n            }\n        }\n\n        &:hover {\n            color: $color-nav-bkgnd;\n        }\n    }\n\n    &__list {\n        margin: 0;\n        padding: 0;\n    }\n\n    &__item {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n\n    &__link {\n        color: $color-nav;\n        display: block;\n        margin: 0;\n        padding: 0.25em 1rem;\n        text-decoration: none;\n\n        &.-page {\n            background-color: $color-nav-page-bkgnd;\n            color: $color-nav-page;\n            padding: 0.5em 1rem;\n\n            &.-active {\n                font-weight: bold;\n            }\n        }\n\n        &.-depth-0 {\n            font-weight: bold;\n        }\n\n        &.-depth-2 {\n            padding-left: 0.5rem;\n        }\n\n        &.-depth-3 {\n            padding-left: 0.75rem;\n        }\n\n        &.-depth-4 {\n            padding-left: 1rem;\n        }\n\n        &.-mod {\n            color: $color-nav-mod;\n            font-size: 0.8em;\n        }\n    }\n}\n",".sg-section {\n    margin-top: 1rem;\n\n    &__description {\n        pre {\n            white-space: pre-wrap;\n            word-wrap: break-word;\n        }\n    }\n}\n",".sg-example {\n    &__example {\n        border: 1px solid $color-border;\n        border-bottom: 0;\n        padding: 1rem;\n        touch-action: none;\n        user-select: none;\n        width: 100%;\n\n        &.-nopad {\n            padding: 0;\n        }\n    }\n\n    &__controls {\n        border: 1px solid $color-border;\n        font-size: 16px;\n        padding: 0.25em 16px;\n        position: relative;\n        text-align: right;\n    }\n\n    &__code {\n        &.-hide {\n            display: none;\n        }\n    }\n\n    &__prettyprint {\n        margin-top: 0;\n    }\n\n    &__btn {\n        appearance: none;\n        background-color: transparent;\n        border: 0;\n        display: inline-block;\n        height: 16px;\n        margin-left: 16px;\n        opacity: 0.5;\n        padding: 0;\n        width: 16px;\n\n        &:hover {\n            opacity: 1;\n        }\n\n        img {\n            display: block;\n            height: 100%;\n            width: 100%;\n        }\n    }\n\n    &__iframe {\n        border: 0;\n        height: 100%;\n        width: 100%;\n    }\n\n    &__iframeWidth {\n        color: $color-border;\n        float: left;\n        font-size: 14px;\n        line-height: 24px;\n    }\n}\n",".sg-swatch {\n\n    display: inline-block;\n    margin-bottom: 1em;\n    margin-right: 10px;\n    vertical-align: top;\n    width: $swatch-width;\n\n    &__list {\n        margin-top: 1rem;\n    }\n\n    &__color {\n        height: $swatch-height;\n        width: $swatch-width;\n    }\n}\n"],"sourceRoot":""}